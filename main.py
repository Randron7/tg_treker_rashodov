
import logging
import asyncio
from aiogram import Bot, Dispatcher, types, F
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
import aiosqlite
from datetime import datetime, timedelta
from aiogram.client.default import DefaultBotProperties
import matplotlib.pyplot as plt
import io
from collections import defaultdict
from aiogram.types import InputFile
import os
from dotenv import load_dotenv

load_dotenv()
API_TOKEN = os.getenv("BOT_TOKEN")

logging.basicConfig(level=logging.INFO)
bot = Bot(token=API_TOKEN, default=DefaultBotProperties(parse_mode="HTML"))
dp = Dispatcher()

async def init_db():
    async with aiosqlite.connect("expenses.db") as db:
        await db.execute("""
            CREATE TABLE IF NOT EXISTS expenses (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER,
                amount REAL,
                category TEXT,
                created_at TEXT DEFAULT (datetime('now', 'localtime'))
            )
        """)
        await db.commit()

# ---------------- –°–æ—Å—Ç–æ—è–Ω–∏—è FSM ----------------
class ExpenseForm(StatesGroup):
    waiting_for_amount = State()
    waiting_for_category = State()

# ---------------- –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ ----------------
main_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥")],
        [KeyboardButton(text="üìä –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É")],
        [KeyboardButton(text="üìÖ –í—Å–µ —Ä–∞—Å—Ö–æ–¥—ã")],
        [KeyboardButton(text="üìà –û—Ç—á–µ—Ç")],
        [KeyboardButton(text="üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ —Ä–∞—Å—Ö–æ–¥—ã")],
    ],
    resize_keyboard=True,
)

category_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üçî –ï–¥–∞"), KeyboardButton(text="üöï –¢–∞–∫—Å–∏")],
        [KeyboardButton(text="üõçÔ∏è –ü–æ–∫—É–ø–∫–∏"), KeyboardButton(text="üéÆ –†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è")],
        [KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")]
    ],
    resize_keyboard=True
)

report_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üìÜ –ó–∞ –¥–µ–Ω—å"), KeyboardButton(text="üìÖ –ó–∞ –Ω–µ–¥–µ–ª—é")],
        [KeyboardButton(text="üóìÔ∏è –ó–∞ –º–µ—Å—è—Ü"), KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")]
    ],
    resize_keyboard=True
)

# ---------------- –ö–æ–º–∞–Ω–¥—ã ----------------
@dp.message(Command("start"))
async def cmd_start(message: Message):
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —É—á—ë—Ç–∞ —Ç–≤–æ–∏—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤.\n\n–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ:",
        reply_markup=main_kb
    )

@dp.message(F.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥")
async def add_expense_start(message: Message, state: FSMContext):
    await message.answer("üí∞ –í–≤–µ–¥–∏ —Å—É–º–º—É —Ä–∞—Å—Ö–æ–¥–∞:")
    await state.set_state(ExpenseForm.waiting_for_amount)

@dp.message(StateFilter(ExpenseForm.waiting_for_amount))
async def get_amount(message: Message, state: FSMContext):
    try:
        amount = float(message.text.replace(",", "."))
        await state.update_data(amount=amount)
        await message.answer("üè∑Ô∏è –í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=category_kb)
        await state.set_state(ExpenseForm.waiting_for_category)
    except ValueError:
        await message.answer("‚ö†Ô∏è –í–≤–µ–¥–∏ —Å—É–º–º—É —á–∏—Å–ª–æ–º, –Ω–∞–ø—Ä–∏–º–µ—Ä: 250.50")

@dp.message(StateFilter(ExpenseForm.waiting_for_category))
async def get_category(message: Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("üö´ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=main_kb)
        return

    category = message.text.strip().replace("üçî ", "").replace("üöï ", "").replace("üõçÔ∏è ", "").replace("üéÆ ", "")
    data = await state.get_data()
    amount = data["amount"]
    user_id = message.from_user.id

    async with aiosqlite.connect("expenses.db") as db:
        await db.execute(
            "INSERT INTO expenses (user_id, amount, category) VALUES (?, ?, ?)",
            (user_id, amount, category)
        )
        await db.commit()

    await message.answer(f"‚úÖ –î–æ–±–∞–≤–∏–ª: <b>{amount} —Ä—É–±</b> ‚Äî <b>{category}</b>", reply_markup=main_kb)
    await state.clear()

@dp.message(F.text == "üìä –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É")
async def show_stats(message: Message):
    user_id = message.from_user.id
    async with aiosqlite.connect("expenses.db") as db:
        async with db.execute("SELECT amount, category FROM expenses WHERE user_id = ?", (user_id,)) as cursor:
            rows = await cursor.fetchall()

    if not rows:
        await message.answer("üì≠ –ü–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤.")
        return

    total = sum(row[0] for row in rows)
    text = "<b>üìä –ö—Ä–∞—Ç–∫–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n\n"
    for amount, category in rows[-10:]:
        text += f"‚Ä¢ {amount:.2f} —Ä—É–± ‚Äî {category}\n"
    text += f"\nüí∞ <b>–ò—Ç–æ–≥–æ: {total:.2f} —Ä—É–±</b>"

    await message.answer(text)

@dp.message(F.text == "üìÖ –í—Å–µ —Ä–∞—Å—Ö–æ–¥—ã")
async def show_all_expenses(message: Message):
    user_id = message.from_user.id
    async with aiosqlite.connect("expenses.db") as db:
        async with db.execute("""
            SELECT amount, category, created_at 
            FROM expenses 
            WHERE user_id = ? 
            ORDER BY created_at DESC
        """, (user_id,)) as cursor:
            rows = await cursor.fetchall()

    if not rows:
        await message.answer("üì≠ –£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç —Ä–∞—Å—Ö–æ–¥–æ–≤.")
        return

    text = "<b>üóìÔ∏è –í—Å–µ —Ä–∞—Å—Ö–æ–¥—ã:</b>\n\n"
    for amount, category, created_at in rows[-20:]:
        text += f"‚Ä¢ {amount:.2f} —Ä—É–± ‚Äî {category} ({created_at})\n"

    await message.answer(text)

@dp.message(F.text == "üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ —Ä–∞—Å—Ö–æ–¥—ã")
async def clear_all_expenses(message: Message):
    user_id = message.from_user.id
    async with aiosqlite.connect("expenses.db") as db:
        await db.execute("DELETE FROM expenses WHERE user_id = ?", (user_id,))
        await db.commit()

    await message.answer("üóëÔ∏è –í—Å–µ —Ç–≤–æ–∏ —Ä–∞—Å—Ö–æ–¥—ã —É–¥–∞–ª–µ–Ω—ã.", reply_markup=main_kb)


# ---------------- –û—Ç—á—ë—Ç—ã ----------------
@dp.message(F.text == "üìà –û—Ç—á–µ—Ç")
async def ask_report_range(message: Message):
    await message.answer("üìä –ó–∞ –∫–∞–∫–æ–π –ø–µ—Ä–∏–æ–¥ –ø–æ–∫–∞–∑–∞—Ç—å –æ—Ç—á–µ—Ç?", reply_markup=report_kb)

@dp.message(F.text.in_({"üìÜ –ó–∞ –¥–µ–Ω—å", "üìÖ –ó–∞ –Ω–µ–¥–µ–ª—é", "üóìÔ∏è –ó–∞ –º–µ—Å—è—Ü"}))
async def report_by_period(message: Message):
    user_id = message.from_user.id
    now = datetime.now()

    if message.text == "üìÜ –ó–∞ –¥–µ–Ω—å":
        start = now.replace(hour=0, minute=0, second=0, microsecond=0)
    elif message.text == "üìÖ –ó–∞ –Ω–µ–¥–µ–ª—é":
        start = now - timedelta(days=7)
    elif message.text == "üóìÔ∏è –ó–∞ –º–µ—Å—è—Ü":
        start = now - timedelta(days=30)
    else:
        await message.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–µ—Ä–∏–æ–¥.", reply_markup=main_kb)
        return

    async with aiosqlite.connect("expenses.db") as db:
        async with db.execute("""
            SELECT amount, category, DATE(created_at)
            FROM expenses
            WHERE user_id = ? AND datetime(created_at) >= datetime(?)
            ORDER BY created_at DESC
        """, (user_id, start.strftime("%Y-%m-%d %H:%M:%S"))) as cursor:
            rows = await cursor.fetchall()

    if not rows:
        await message.answer("üö´ –ù–µ—Ç —Ä–∞—Å—Ö–æ–¥–æ–≤ –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥.", reply_markup=main_kb)
        return

    # –¢–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç
    total = sum(row[0] for row in rows)
    text = f"<b>üßæ –û—Ç—á—ë—Ç ({message.text}):</b>\n\n"
    for amount, category, created_at in rows:
        text += f"‚Ä¢ {amount:.2f} —Ä—É–± ‚Äî {category} ({created_at})\n"
    text += f"\nüí∞ <b>–ò—Ç–æ–≥–æ: {total:.2f} —Ä—É–±</b>"
    await message.answer(text)

    # --- –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–æ–≤ ---

    # –°—á–∏—Ç–∞–µ–º —Å—É–º–º—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –∏ –ø–æ –¥–∞—Ç–∞–º
    cat_totals = defaultdict(float)
    date_totals = defaultdict(float)
    for amount, category, date in rows:
        cat_totals[category] += amount
        date_totals[date] += amount

    # 1. –ö—Ä—É–≥–æ–≤–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    fig1, ax1 = plt.subplots()
    ax1.pie(cat_totals.values(), labels=cat_totals.keys(), autopct='%1.1f%%', startangle=140)
    ax1.axis("equal")
    plt.title("üìä –†–∞—Å—Ö–æ–¥—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º")
    buf1 = io.BytesIO()
    plt.savefig(buf1, format="png")
    plt.close(fig1)
    buf1.seek(0)

    # 2. –õ–∏–Ω–µ–π–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫ —Ä–∞—Å—Ö–æ–¥–æ–≤ –ø–æ –¥–Ω—è–º
    fig2, ax2 = plt.subplots()
    dates_sorted = sorted(date_totals.keys())
    values_sorted = [date_totals[d] for d in dates_sorted]
    ax2.plot(dates_sorted, values_sorted, marker='o', linestyle='-', color='blue')
    plt.xticks(rotation=45)
    plt.title("üìà –†–∞—Å—Ö–æ–¥—ã –ø–æ –¥–Ω—è–º")
    plt.tight_layout()
    buf2 = io.BytesIO()
    plt.savefig(buf2, format="png")
    plt.close(fig2)
    buf2.seek(0)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç–∏–Ω–∫–∏ –≤ —á–∞—Ç
    photo1 = InputFile(buf1, filename="categories.png")
    await message.answer_photo(photo1)

    photo2 = InputFile(buf2, filename="daily.png")
    await message.answer_photo(photo2, reply_markup=main_kb)  # <-- –¢—É—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç—Å—è


@dp.message(F.text == "‚ùå –û—Ç–º–µ–Ω–∞")
async def cancel(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=main_kb)

# ---------------- –ó–∞–ø—É—Å–∫ ----------------
async def main():
    await init_db()
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
